// Copyright {{ .currentYear }} Outreach Corporation. All Rights Reserved.

// Description: This file is the focal point of configuration that needs passed
// to various parts of the service.
// Managed: true

package {{ .underscoreAppName }} //nolint:revive // Why: This nolint is here just in case your project name contains any of [-_].

import (
    "context"
    "os"
    "strings"

    "github.com/getoutreach/gobox/pkg/cfg"
    "github.com/getoutreach/gobox/pkg/log"
    "github.com/getoutreach/gobox/pkg/events"
    "github.com/getoutreach/services/pkg/find"
    ///Block(configImports)
{{- if .configImports }}
{{ .configImports }}
{{- end }}
    ///EndBlock(configImports)
)

// Config tracks config needed for {{ .appName }}
type Config struct {
    ListenHost string `yaml:"ListenHost"`
    HTTPPort int `yaml:"HTTPPort"`
    {{- if .http }}
    PublicHTTPPort int `yaml:"PublicHTTPPort"`
    {{- end }}
    {{- if .grpc }}
    GRPCPort int `yaml:"GRPCPort"`
    {{- end }}
    {{- if .kafka }}
    KafkaHosts []string `yaml:"KafkaHosts"`
    KafkaConsumerGroupID string `yaml:"KafkaConsumerGroupID"`
    KafkaConsumerTopic string `yaml:"KafkaConsumerTopic"`
    {{- end }}
    ///Block(config)
    {{- if .config }}
    {{ .config }}
    {{- end }}
    ///EndBlock(config)
}

// MarshalLog can be used to write config to log
func (c *Config) MarshalLog(addfield func(key string, value interface{})) {
	///Block(marshalconfig)
	{{- if .marshalconfig }}
{{ .marshalconfig }}
	{{- end }}
	///EndBlock(marshalconfig)
}

// LoadConfig returns a new Config type that has been loaded in accordance to the environment
// that the service was deployed in, with all necessary tweaks made before returning.
// nolint: funlen // Why: This function is long for extensibility reasons since it is generated by bootstrap.
func LoadConfig(ctx context.Context) *Config {
    // NOTE: Defaults should generally be set in the config
    // override jsonnet file: deployments/{{ .appName }}/{{ .appName }}.config.jsonnet
    c := Config{
        // Defaults to [::]/0.0.0.0 which will broadcast to all reachable
        // IPs on a server on the given port for the respective service.
        ListenHost: "",
        HTTPPort: 8000,
	    {{- if .http }}
	    PublicHTTPPort: 8080,
	    {{- end }}
        {{- if .grpc }}
        GRPCPort: 5000,
        {{- end }}
        ///Block(defconfig)
        {{- if .defconfig }}
{{ DeprecationNotice .defconfig (printf "Configuration should be declared in deployments/%s/%s.config.jsonnet" .appName .appName) }}
        {{- end }}
        ///EndBlock(defconfig)
    }

    // Attempt to load a local config file on top of the defaults
	if err := cfg.Load("{{ .appName }}.yaml", &c); os.IsNotExist(err) {
        log.Info(ctx, "No configuration file detected. Using default settings")
    } else if err != nil {
        log.Error(ctx, "Failed to load configuration file, will use default settings", events.NewErrorInfo(err))
    }

    {{- if .kafka }}
	if len(c.KafkaHosts) == 0 {
		brokerDNS, err := find.Service(ctx, find.KafkaPublishBrokers)
		if err != nil {
			log.Fatal(ctx, "missing kafka brokers configuration")
		}

		c.KafkaHosts = []string{brokerDNS + ":9092"}
	}
    {{- end }}

    // Do any necessary tweaks/augmentations to your configuration here
    ///Block(configtweak)
    {{- if .configtweak }}
{{ .configtweak }}
    {{- end }}
    ///EndBlock(configtweak)

    log.Info(ctx, "Configuration data of the application:\n", &c)

    return &c
}
