{{- $_ := stencil.ApplyTemplate "skipIfNotService" -}}
{{- $_ := file.SetPath (printf "internal/%s/%s" .Config.Name (base file.Path)) }}
// {{ stencil.ApplyTemplate "copyright" }}

// Description: This file is the focal point of configuration that needs passed
// to various parts of the service.
// Managed: true

package {{ stencil.ApplyTemplate "goPackageSafeName" }} //nolint:revive // Why: We allow [-_].

import (
	"context"
	"os"
	"strings"

	"github.com/getoutreach/gobox/pkg/cfg"
	"github.com/getoutreach/gobox/pkg/log"
	"github.com/getoutreach/gobox/pkg/events"
	"github.com/getoutreach/services/pkg/find"
	// <<Stencil::Block(configImports)>>
{{ file.Block "configImports" }}
	// <</Stencil::Block>>
)

// Config tracks config needed for {{ .Config.Name }}
type Config struct {
	ListenHost string `yaml:"ListenHost"`
	HTTPPort int `yaml:"HTTPPort"`
	{{- if has "http" (stencil.Arg "serviceActivities") }}
	PublicHTTPPort int `yaml:"PublicHTTPPort"`
	{{- end }}
	{{- if has "grpc" (stencil.Arg "serviceActivities") }}
	GRPCPort int `yaml:"GRPCPort"`
	{{- end }}
	{{- if has "kafka" (stencil.Arg "serviceActivities") }}
	KafkaHosts []string `yaml:"KafkaHosts"`
	KafkaConsumerGroupID string `yaml:"KafkaConsumerGroupID"`
	KafkaConsumerTopic string `yaml:"KafkaConsumerTopic"`
	{{- end }}
	// <<Stencil::Block(config)>>
{{ file.Block "config"}}
	// <</Stencil::Block>>
}

// MarshalLog can be used to write config to log
func (c *Config) MarshalLog(addfield func(key string, value interface{})) {
	// <<Stencil::Block(marshalconfig)>>
{{ file.Block "marshalconfig" }}
	// <</Stencil::Block>>
}

// LoadConfig returns a new Config type that has been loaded in accordance to the environment
// that the service was deployed in, with all necessary tweaks made before returning.
// nolint: funlen // Why: This function is long for extensibility reasons since it is generated by stencil.
func LoadConfig(ctx context.Context) (*Config, error) {
	// NOTE: Defaults should generally be set in the config
	// override jsonnet file: deployments/{{ .Config.Name }}/{{ .Config.Name }}.config.jsonnet
	c := Config{
		// Defaults to [::]/0.0.0.0 which will broadcast to all reachable
		// IPs on a server on the given port for the respective service.
		ListenHost: "",
		HTTPPort: 8000,
		{{- if has "http" (stencil.Arg "serviceActivities") }}
		PublicHTTPPort: 8080,
		{{- end }}
		{{- if has "grpc" (stencil.Arg "serviceActivities") }}
		GRPCPort: 5000,
		{{- end }}
		/// !!! DEPRECATED: This block is deprecated and will be removed in an upcoming release.
		/// All configuration should be defined in deployments/{{ .Config.Name }}/{{.Config.Name}}.config.jsonnet.
		///
		// <<Stencil::Block(defconfig)>>
		{{- if file.Block "defconfig" }}
{{ file.Block "defconfig" }}
		{{- end }}
		// <</Stencil::Block>>
	}

	// Attempt to load a local config file on top of the defaults
	if err := cfg.Load("{{ .Config.Name }}.yaml", &c); err != nil {
		return nil, err
	}

	{{- if has "kafka" (stencil.Arg "serviceActivities") }}
	if len(c.KafkaHosts) == 0 {
		brokerDNS, err := find.Service(ctx, find.KafkaPublishBrokers)
		if err != nil {
			log.Fatal(ctx, "missing kafka brokers configuration")
		}

		c.KafkaHosts = []string{brokerDNS + ":9092"}
	}
	{{- end }}

	// Do any necessary tweaks/augmentations to your configuration here
	// <<Stencil::Block(configtweak)>>
{{ file.Block "configtweak" }}
	// <</Stencil::Block>>

	log.Info(ctx, "Configuration data of the application:\n", &c)

	return &c, nil
}
